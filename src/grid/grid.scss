/**
* Lesli
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*
* Powered by https://www.lesli.tech
* Building a better future, one line of code at a time.
*
* @author   Luis Donis <ldonis@lesli.tech>
* @license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html
* @version  GIT: 1.0.0 alpha
*/


@function strip-unit($number) {

    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;

}


@function lesli-grid-margin($margin, $type:false) {
    /*
    $margin-type = unit(margin)
    
    if $type
        $margin-type = $type

    $margin = unit(margin, '')
    
    if $margin-type == 'px'
        $margin = unit($margin, 'px')

    if $margin-type == '%' or $margin-type == ''
        $margin = unit($margin, '%')
        
    return $margin
    */

    @return $margin;

}

/*
* Columnas de grids & blocks
* Crea columnas individuales
*
* @param column int Numero de columna 
* @param column-total Total de columnas
*
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 0.1.0 alpha
*/
@mixin lesli-grid-column($column, $column-total: 12, $margin:0) {
    
    // Variables
    $margin-type: unit($margin);
    $margin: unit(margin, '');
    $width-total: 100;

    // El total del margen en todo el grid sera igual al total de
    // columnas por el total de margen asignado
    // La ultima columna del grid no lleva margen
    // por tal razon se resta dicha columna al total de columnas
    

    // Automatic columns
    @if $column-total > 0 {
            
        $margin: $margin * ($column - 1);
        $margin: $margin / $column;
        
        // El ancho de cada columna sera igual al ancho disponible (menos margen)
        // dividido entre el total de columnas del grid
        $width: 100 / $column;
        
        $width: unit($width, '%');

    }

    // Manual columns
    @if $column-total == 0 {
        $width: ((100 / $column-total) * $column) - $margin;
    }


    // Margin in pixels
    @if $margin-type == 'px' {
        $margin: lesli-grid-margin($margin, 'px');
        $width: "calc(%s - %s)" % ($width $margin);
    }


    // Margin in percentage
    @if $margin-type == '%' or $margin-type == '' {
        $width: $width - $margin;
    }

    // Se retorna el ancho de columna
    width: $width;
    
}


/*
* Grids & Blocks automaticos
* Genera estilos para el contenedor del grid y para cada una de las columnas
* que se especificaron en los parametros
*
* @param columns int Cantidad de columnas a incluir en el grid
* @param margin int Margen entre columnas
* @param breakpoint int Breakpoint a generar en pixeles
*
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <https://www.lesli.tech>
* @since 0.1.0 alpha
*/
@mixin lesli-grid($columns: 0, $margin: 0, $breakpoint: 320) {
    
    // basic styles for grid container
    width: 100%;
    font-size: 0;

    // Estilos a pseudo elementos
    &:before,
    &:after {
        content: "";
        display: inline-block;
        vertical-align: middle;
        //height 100%
    }

    // Filas del grid
    & > * {
        font-size: initial;
        white-space: initial;
        display: inline-block;

        // automatic columns 
        @if $columns > 0 {
            // Utilizo el mixin para crear columnas
            // Lesli-grid-column(column: $columns, margin: $margin)
        }

    }

    // inicializa breakpoints

    @media (max-width: (strip-unit($breakpoint) * 1px)) {

        // Clase css para breakpoints
        & > * {
            display: block;
            width: initial;
        }

    }

    @media (min-width: (strip-unit($breakpoint) * 1px)) {

        // Si el grid incluye margen
        @if $margin != 0 {

            // * Margen de cada elemento del grid,
            & > *:not(:last-child){
                //margin-right Lesli-grid-margin($margin)
            }

        }

    }

}