/*
* Responsive Cat
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*
* CSS version 3
*
* Establece estilos estandar para sitio web
*
* @author   Luis Gdonis <emc2@ldonis.com>
* @license  GPLv3 http://www.gnu.org/licenses/gpl-3.0.en.html
* @version  2.0.0 beta
* @link     http://responsivecat.com
*/


/*
* Se incluyen variables estandar y constructores del framework
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since  2.0.0
*/
@require '../init/rinit'

/*
* Funciones y Mixins para construir el grid
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
*/


/*
* Retorna el nombre de la clase
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
getClassName($column-number, $column-prefix = 'r')

    // si el numero de columna es menor a 10, se agrega un cero al inicio
    if $column-number < 10
        $column-number = '0' + $column-number

    // arma nombre de clase css
    return $column-prefix + $column-number


/*
* Retorna el nombre de la clase
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
getAutoColumnWidth($column-number, $margin)

    // El total del margen en todo el grid sera igual al total de
    // columnas por el porcentaje de margen asignado
    // La primera columna del grid no lleva margen
    // por tal razon se resta dicha columna al total de columnas
    $margin = $margin * ( $column-number - 1 )

    // El ancho de cada columna sera igual al ancho disponible (menos margen)
    // dividido entre el total de columnas del grid
    $width = ((100 - $margin) / $column-number)

    // Se retorna el ancho de columna
    return $width



/*
* Retorna el nombre de la clase
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
getManualColumnWidth($column-total, $column-number, $margin)

    // El total del margen en todo el grid sera igual al total de
    // columnas por el porcentaje de margen asignado
    // La primera columna del grid no lleva margen
    // por tal razon se resta dicha columna al total de columnas
    $margin = $margin //* ( $column-number - 1 )

    // El ancho de cada columna sera igual al ancho disponible (menos margen)
    // multiplicado por el total de columnas del grid
    $width = ((100 / $column-total) * $column-number) - $margin

    //$ancho = (( 100 / ( $columns)) * column) - $margen

    // Se retorna el ancho de columna
    return $width



/*
* Contenedor de columnas automaticas y manuales
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
.rgrid
.rblock
    width 100%
    font-size 0

    // * Estilos a pseudo elementos
    // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
    &:before
    &:after
        content ""
        display inline-block
        vertical-align middle
        height 100%

    // * Filas del grid
    // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
    & > *
        font-size initial
        white-space initial
        display inline-block


/*
* Constructor de grid con columnas automaticas columns-n = (width-margin)/n
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
.rgrid


    // Calcula el total de iteraciones a realizar para los breakpoints
    $rgrid-iterations-count = ($rgrid-breakpoint-end - $rgrid-breakpoint-start )
    $rgrid-iterations-count = $rgrid-iterations-count / $rgrid-breakpoint-iteration
    $rgrid-iterations-count = $rgrid-iterations-count + 1 // ultima iteracion

    // Ancho en pixeles para primer breakpoint
    $rgrid-breakpoint = $rgrid-breakpoint-start


    // Por cada breakpoint
    for media in (1 .. $rgrid-iterations-count)


        // inicializa breakpoints
        @media (min-width: unit($rgrid-breakpoint, 'px'))


            // Clase css para breakpoints
            $rgrid-breakpoint-class-name = 'r' + $rgrid-breakpoint


            // * Margen de cada elemento del grid
            // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
            &.{$rgrid-breakpoint-class-name} > *
                margin-left unit($rgrid-columns-automatic-margin, '%')


            // Recorre la cantidad de columnas configuradas
            for column in ( 2 .. $rgrid-columns-automatic-count )


                // Obtiene el nombre de la clase para columnas del grid
                $rgrid-class-name = getClassName(column, $rgrid-columns-automatic-prefix)


                // Obtiene ancho de cada columna
                $rgrid-width-percent = getAutoColumnWidth(column, $rgrid-columns-automatic-margin )


                // Genera la clase css para el ancho de cada columna
                &.{$rgrid-breakpoint-class-name}.{$rgrid-class-name} > *
                    width unit($rgrid-width-percent, '%')


            // * Remueve el margen de la ultima columna
            // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
            & > *:first-child
                margin-left 0 !important


        // aumenta el breakpoint segun lo configurado para cada iteracion
        $rgrid-breakpoint = $rgrid-breakpoint + $rgrid-breakpoint-iteration




/*
* Constructor de grid con columnas manuales columns-n = (width-margin)/n
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
.rgrid


    // Calcula el total de iteraciones a realizar para los breakpoints
    $rgrid-iterations-count = ($rgrid-breakpoint-end - $rgrid-breakpoint-start )
    $rgrid-iterations-count = $rgrid-iterations-count / $rgrid-breakpoint-iteration


    // Ancho en pixeles para primer breakpoint
    $rgrid-breakpoint = $rgrid-breakpoint-start


    // Por cada breakpoint
    for media in (1 .. $rgrid-iterations-count)


        // inicializa breakpoints
        @media (min-width: unit($rgrid-breakpoint, 'px'))


            // Clase css para breakpoints
            $rgrid-breakpoint-class-name = 'r' + $rgrid-breakpoint


            // * Margen de cada elemento del grid
            // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
            &.{$rgrid-breakpoint-class-name} > *
                margin-left unit($rgrid-columns-manual-margin, '%')


            // Recorre la cantidad de columnas configuradas
            for column in ( 1 .. $rgrid-columns-manual-count )


                // Obtiene el nombre de la clase para columnas del grid
                $rgrid-class-name = getClassName(column, $rgrid-columns-manual-prefix)


                // Obtiene ancho de cada columna
                $rgrid-width-percent = getManualColumnWidth($rgrid-columns-manual-count, column, $rgrid-columns-manual-margin )


                // Genera la clase css para el ancho de cada columna
                &.{$rgrid-breakpoint-class-name}

                    .{$rgrid-class-name}
                        width unit($rgrid-width-percent, '%')


            // * Remueve el margen de la ultima columna
            // * ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
            & > *:first-child
                margin-left 0 !important


        // aumenta el breakpoint segun lo configurado para cada iteracion
        $rgrid-breakpoint = $rgrid-breakpoint + $rgrid-breakpoint-iteration



/*
* Constructor de blocks con columnas automaticas columns-n = width/n
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
.rblock


    // Calcula el total de iteraciones a realizar para los breakpoints
    $rgrid-iterations-count = ($rgrid-breakpoint-end - $rgrid-breakpoint-start )
    $rgrid-iterations-count = $rgrid-iterations-count / $rgrid-breakpoint-iteration


    // Ancho en pixeles para primer breakpoint
    $rgrid-breakpoint = $rgrid-breakpoint-start


    // Por cada breakpoint
    for media in (2 .. $rgrid-iterations-count)


        // inicializa breakpoints
        @media (min-width: unit($rgrid-breakpoint, 'px'))


            // Clase css para breakpoints
            $rblock-breakpoint-class-name = 'r' + $rgrid-breakpoint


            // Recorre la cantidad de columnas configuradas
            for column in ( 2 .. $rblocks-columns-automatic-count )


                // Obtiene el nombre de la clase para columnas del grid
                $rblock-class-name = getClassName(column, $rblocks-columns-automatic-prefix)


                // Obtiene ancho de cada columna
                $rblock-width-percent = 100 / column


                // Genera la clase css para el ancho de cada columna
                &.{$rblock-breakpoint-class-name}.{$rblock-class-name} > *
                    width unit($rblock-width-percent, '%')


        // aumenta el breakpoint segun lo configurado para cada iteracion
        $rgrid-breakpoint = $rgrid-breakpoint + $rgrid-breakpoint-iteration



/*
* Constructor de blocks con columnas manuales columns-n = width/n
* ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~  ~·~
* @author Luis Gdonis <http://ldonis.com>
* @since 2.0.0
*/
.rblock


    // Calcula el total de iteraciones a realizar para los breakpoints
    $rgrid-iterations-count = ($rgrid-breakpoint-end - $rgrid-breakpoint-start )
    $rgrid-iterations-count = $rgrid-iterations-count / $rgrid-breakpoint-iteration


    // Ancho en pixeles para primer breakpoint
    $rgrid-breakpoint = $rgrid-breakpoint-start


    // Por cada breakpoint
    for media in (2 .. $rgrid-iterations-count)


        // inicializa breakpoints
        @media (min-width: unit($rgrid-breakpoint, 'px'))


            // Clase css para breakpoints
            $rblock-breakpoint-class-name = 'r' + $rgrid-breakpoint


            // Recorre la cantidad de columnas configuradas
            for column in ( 1 .. $rblocks-columns-manual-count )


                // Obtiene el nombre de la clase para columnas del grid
                $rblock-class-name = getClassName(column, $rblocks-columns-manual-prefix)


                // Obtiene ancho de cada columna
                $rblock-width-percent = (100 / $rblocks-columns-manual-count) * column


                // Genera la clase css para el ancho de cada columna
                &.{$rblock-breakpoint-class-name}

                    .{$rblock-class-name}
                        width unit($rblock-width-percent, '%')


        // aumenta el breakpoint segun lo configurado para cada iteracion
        $rgrid-breakpoint = $rgrid-breakpoint + $rgrid-breakpoint-iteration
